from openai import OpenAI
from django.conf import settings
import json

client = OpenAI(api_key=settings.OPENAI_API_KEY)

def ask_gpt(message, user_profile=None, mode="detail", product_list=None):
    asset_map = {
        "낮음": "1천만원 미만",
        "보통": "1천만원~1억원",
        "높음": "1억원 이상",
    }
    income_map = {
        "낮음": "3천만원 미만",
        "보통": "3천만원~6천만원",
        "높음": "6천만원 이상",
    }
    job_map = {
        "무직": "무직",
        "학생": "학생",
        "직장인": "직장인",
        "프리랜서": "프리랜서",
        "기타": "기타",
    }

    if mode == "guest":
        prompt = f"""
        당신은 금융을 설명해주는 AI 챗봇입니다.
        친구처럼 친근하게 반말을 하되 예의를 지켜주세요
        아래는 비로그인 사용자의 질문입니다.

        아래 조건을 따르세요:
        - 금융과 관련된 질문에는 짧고 간단하고 친절하게 응답해 주되, 로그인하면 더 자세한 상담과 추천이 가능하다는 점을 알려주세요.
        - 금융과 무관한 질문(예: 사람 이름, 연예인, 소설/드라마, 잡담, 농담, 일상대화 등)이 들어오면 아래처럼 답변하세요:
        "꿍스는 그런 말 모르겠어요 🐤"
        
        질문: "{message}"
        """
    elif mode == "no_profile":
        prompt = f"""
        당신은 금융을 설명해주는 AI 챗봇입니다.
        친구처럼 친근하게 반말을 하되 예의를 지켜주세요
        아래는 로그인했지만 금융정보가 없는 사용자의 질문입니다.

        아래 조건을 따르세요:
        - 금융과 관련된 질문에는 간단한 상담을 제공하되, 금융정보를 입력하면 더 정확한 추천이 가능하다는 점을 알려주세요.
        - 금융과 무관한 질문(예: 사람 이름, 연예인, 소설/드라마, 잡담, 농담, 일상대화 등)이 들어오면 아래처럼 답변하세요:
        "꿍스는 그런 말 모르겠어요 🐤"

        질문: "{message}"
        """
    else:
        profile_text = (
            f"- 자산: {asset_map.get(user_profile.asset, user_profile.asset)}\n"
            f"- 연봉: {income_map.get(user_profile.income, user_profile.income)}\n"
            f"- 직업: {job_map.get(user_profile.job, user_profile.job)}\n"
        )

        if product_list:
            products_text = json.dumps(product_list, ensure_ascii=False, indent=2)
        else:
            products_text = "상품 리스트가 주어지지 않았습니다."

        prompt = f"""
            당신은 사용자의 친구이자 20년 경력의 금융 전문 상담 챗봇입니다.
            다음 사용자의 금융정보와 실제 금융상품 리스트를 참고해, 항상 아래 JSON 형식으로만 응답하세요:

            {{
            "설명": "<질문에 공감하고 조언하거나, 자연스럽게 상품 추천의 필요성을 말해요. 반말이지만 예의 있게>",
            "추천상품": [
                {{
                "fin_prdt_cd": "...",
                "kor_co_nm": "...",
                "fin_prdt_nm": "...",
                "intr_rate": ..., 
                "intr_rate2": ...
                }},
                ...
            ],
            "추천이유": "<추천 이유를 구체적으로 설명하세요. 자산/소득/직업 조건과 어떤 점이 맞는지도 포함>"
            }}

            [사용자 금융정보]
            {profile_text}

            [상품 리스트]
            {products_text}

            [추천 기준 설명]
            - 자산이 낮은 경우:
            - 가입 금액이 낮고, 납입 조건이 자유로운 상품 선호
            - 모바일 가입 가능, 조건이 간단한 상품 추천
            - 자산이 보통일 경우:
            - 납입 여력이 있으므로 정기예금, 중기 적금 가능
            - 우대금리 조건이 생활 실적 기반이면 괜찮음
            - 자산이 높은 경우:
            - 고금리, 장기예치, 복리형, 우대금리 폭이 큰 상품도 추천 가능
            - 세금우대/절세형 상품도 고려

            - 소득이 낮은 경우:
            - 급여이체, 카드실적 같은 복잡한 조건이 있는 상품은 피함
            - 우대 조건이 단순하거나 없어도 금리가 괜찮은 상품 선호
            - 소득이 보통일 경우:
            - 생활 실적 기반 조건 일부는 충족 가능하므로 포함해도 좋음
            - 소득이 높은 경우:
            - 다양한 금융 활동 조건을 충족할 수 있으므로, 우대조건이 복잡해도 추천 가능

            - 직업이 무직/프리랜서인 경우:
            - 납입이 자유롭고 조건이 복잡하지 않은 상품 우선
            - 직장인일 경우:
            - 급여이체, 카드실적 조건을 통해 우대금리를 받을 수 있음
            - 학생일 경우:
            - 청년/모바일 전용 상품, 소액으로 시작할 수 있는 상품 선호

            [추천 조건 판별 기준]
            다음 조건 중 하나라도 해당되면 추천상품을 반드시 포함하세요:
            - 질문에 '예금', '적금', '금리', '돈', '저축', '모으기' 같은 키워드가 포함됨
            - 사용자 상황(자산/소득/직업)이 특정 상품 조건과 맞는 경우
            - 상담 중 추천이 도움이 될 만한 타이밍이라고 판단될 경우

            [주의사항]
            - 추천상품은 반드시 위 리스트에 포함된 실제 상품만 사용하세요 (가짜 상품 ❌)
            - 추천상품은 최대 5개까지 포함하세요.
            - 금융과 전혀 무관한 질문(예: 연예인, 게임, 소설 등)일 경우 다음처럼 응답하세요:
            {{
            "설명": "꿍스는 그런 말 모르겠어 🐤 금융에 대해 물어보고 싶은 거 있어?",
            "추천상품": [],
            "추천이유": ""
            }}

            질문: "{message}"
            GPT는 반드시 위의 JSON 객체만 반환하세요. 다른 어떤 형식도 포함하지 마세요.
            절대로 코드블럭(````json`)이나 따옴표를 추가하지 마세요.
            """

    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=800,
            temperature=0.7,
        )
        return response.choices[0].message.content
    except Exception as e:
        print("❌ GPT 호출 실패:", e)
        import traceback
        traceback.print_exc()
        return json.dumps({
            "설명": "⚠️ GPT 응답 실패",
            "추천상품": [],
            "추천이유": ""
        })
